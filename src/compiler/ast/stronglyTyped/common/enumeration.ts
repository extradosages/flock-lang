import {
    booleanTerm,
    booleanType,
    clientImplementation,
    floatTerm,
    floatType,
    functionTermEliminator,
    functionType,
    genericTypeConstructor,
    genericTypeEliminator,
    integerTerm,
    integerType,
    lambdaConstructor,
    largeTypeType,
    library,
    productTermConstructor,
    productTermEliminator,
    productType,
    stringTerm,
    stringType,
    sumTermConstructor,
    sumTermEliminator,
    sumType,
    termBinding,
    termDefinition,
    termReference,
    typeBinding,
    typeDefinition,
    typeReference,
} from "../../defs";

export const strongNodeKinds = [
    "booleanTerm",
    "booleanType",
    "clientImplementation",
    "floatTerm",
    "floatType",
    "functionTermEliminator",
    "functionType",
    "genericTypeConstructor",
    "genericTypeEliminator",
    "integerTerm",
    "integerType",
    "lambdaConstructor",
    "largeTypeType",
    "library",
    "productTermConstructor",
    "productTermEliminator",
    "productType",
    "stringTerm",
    "stringType",
    "sumTermConstructor",
    "sumTermEliminator",
    "sumType",
    "termBinding",
    "termDefinition",
    "termReference",
    "typeBinding",
    "typeDefinition",
    "typeReference",
] as const;

export const strongNodes = {
    booleanTerm,
    booleanType,
    clientImplementation,
    floatTerm,
    floatType,
    functionTermEliminator,
    functionType,
    genericTypeConstructor,
    genericTypeEliminator,
    integerTerm,
    integerType,
    lambdaConstructor,
    largeTypeType,
    library,
    productTermConstructor,
    productTermEliminator,
    productType,
    stringTerm,
    stringType,
    sumTermConstructor,
    sumTermEliminator,
    sumType,
    termBinding,
    termDefinition,
    termReference,
    typeBinding,
    typeDefinition,
    typeReference,
} as const satisfies Record<(typeof strongNodeKinds)[number], unknown>;

export const strongEdges = {
    booleanTerm: booleanTerm.edges,
    booleanType: booleanType.edges,
    clientImplementation: clientImplementation.edges,
    floatTerm: floatTerm.edges,
    floatType: floatType.edges,
    functionTermEliminator: functionTermEliminator.edges,
    functionType: functionType.edges,
    genericTypeConstructor: genericTypeConstructor.edges,
    genericTypeEliminator: genericTypeEliminator.edges,
    integerTerm: integerTerm.edges,
    integerType: integerType.edges,
    lambdaConstructor: lambdaConstructor.edges,
    largeTypeType: largeTypeType.edges,
    library: library.edges,
    productTermConstructor: productTermConstructor.edges,
    productTermEliminator: productTermEliminator.edges,
    productType: productType.edges,
    stringTerm: stringTerm.edges,
    stringType: stringType.edges,
    sumTermConstructor: sumTermConstructor.edges,
    sumTermEliminator: sumTermEliminator.edges,
    sumType: sumType.edges,
    termBinding: termBinding.edges,
    termDefinition: termDefinition.edges,
    termReference: termReference.edges,
    typeBinding: typeBinding.edges,
    typeDefinition: typeDefinition.edges,
    typeReference: typeReference.edges,
} as const;
